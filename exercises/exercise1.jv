
//A pipeline is a sequence of different computing steps, the blocks.
pipeline AirportsPipeline {


 // Syntax of a pipeconnecting the block AirportsExtractor with the block AirportsTextFileInterpreter.
  AirportsExtractor
   -> AirportsTextFileInterpreter;

 // The output of the preceding block is hereby used  as input for the succeeding block.Pipes can be further chained,leading to an overview of the pipeline.
  AirportsTextFileInterpreter
    -> AirportsCSVInterpreter
    -> AirportsTableInterpreter
    -> AirportsLoader;

  // Below the pipes, we usually define the blocks 
  // that are connected by the pipes.

  block AirportsExtractor oftype HttpExtractor {

    
    // Here, we specify the URL where the file shall be downloaded from.
    url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
  }

  // The HttpExtractor requires no input and produces a binary file as output.
  // This file has to be interpreted, e.g., as text file.
  block AirportsTextFileInterpreter oftype TextFileInterpreter { }

  // Next, we interpret the text file as sheet.
  //Interprets an input file as a csv-file containing string-values delimited by delimiter and outputs a Sheet.
  block AirportsCSVInterpreter oftype CSVInterpreter {
    delimiter: ";";
  
  }

  
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically.@Important
  block AirportsTableInterpreter oftype TableInterpreter {
    header: true;
    
    columns: [
      "Lfd. Nummer" oftype integer,
      "Name des Flughafens" oftype text,
      "Ort" oftype text,
      "Land" oftype text,
      "IATA" oftype text,
      "ICAO" oftype text,
      "Latitude" oftype decimal,
      "Longitude" oftype decimal,
      "Altitude" oftype integer
      
 
    ];
  }

  // As a last step, we load the table into a sink,
  // here into a sqlite file.
  // The structural information of the table is used
  // to generate the correct table.
  block AirportsLoader oftype SQLiteLoader {
    table: "airports";
    file: "./airports.sqlite";
  }


}
